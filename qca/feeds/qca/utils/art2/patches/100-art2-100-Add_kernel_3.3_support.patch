From b304acd79215141da1eca07bd0c3a1bb7f181d57 Mon Sep 17 00:00:00 2001
From: Mohammmed Shafi Shajakhan <mohammed@qti.qualcomm.com>
Date: Mon, 27 Jan 2014 13:16:32 +0530
Subject: [PATCH 1/3] [art2] 100-Add_kernel_3.3_support.patch

Signed-off-by: Mohammmed Shafi Shajakhan <mohammed@qti.qualcomm.com>
---
 driver/linux/modules/Makefile   |    4 ++
 driver/linux/modules/dk_event.c |    3 +-
 driver/linux/modules/dk_func.c  |   10 ++++-
 driver/linux/modules/main.c     |   90 ++++++++++++++++++++++++++++++++++++++-
 4 files changed, 103 insertions(+), 4 deletions(-)

diff --git a/driver/linux/modules/Makefile b/driver/linux/modules/Makefile
index d3b8bef..6cdfe39 100644
--- a/driver/linux/modules/Makefile
+++ b/driver/linux/modules/Makefile
@@ -44,6 +44,10 @@ ifeq ($(OCTEON),1)
 EXTRA_CFLAGS += -DOCTEON
 endif
 
+ifeq ($(USE_PLATFORM_FRAMEWORK),1)
+EXTRA_CFLAGS += -DUSE_PLATFORM_FRAMEWORK=1
+endif
+
 obj-m := art.o
 art-objs := dk_func.o client.o main.o dk_pci_bus.o dk_isr.o dk_event.o
 
diff --git a/driver/linux/modules/dk_event.c b/driver/linux/modules/dk_event.c
index 79074e2..cba0600 100644
--- a/driver/linux/modules/dk_event.c
+++ b/driver/linux/modules/dk_event.c
@@ -17,8 +17,7 @@ Contains low level functions for event handling.
 //void acquireLock(p_event_queue);
 //void releaseLock(p_event_queue);
 
-
-spinlock_t driver_lock = SPIN_LOCK_UNLOCKED;
+DEFINE_SPINLOCK(driver_lock);
 
 // initEventQueue - initialize an event queue
 void initEventQueue(p_event_queue pQueue) 
diff --git a/driver/linux/modules/dk_func.c b/driver/linux/modules/dk_func.c
index 7d433af..70ace7c 100644
--- a/driver/linux/modules/dk_func.c
+++ b/driver/linux/modules/dk_func.c
@@ -4,6 +4,7 @@
 #include <linux/fs.h>
 #include <linux/module.h>
 #include <linux/slab.h>
+#include <linux/version.h>
 #include <asm/uaccess.h>
 
 #include "dk.h"
@@ -117,7 +118,10 @@ static int dk_mmap
 
 static int dk_ioctl
 (
- 	struct inode *inode, 
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 36))
+#else
+	struct inode *inode,
+#endif
 	struct file *file,
 	unsigned int cmd,
 	unsigned long arg
@@ -424,7 +428,11 @@ static struct file_operations dk_fops = {
 	open:	dk_open,
 	release: dk_release,
 	mmap:	dk_mmap,
+#if (LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 36))
+	unlocked_ioctl : dk_ioctl
+#else
 	ioctl  : dk_ioctl
+#endif
 };
 
 INT32  dk_dev_init(void) {
diff --git a/driver/linux/modules/main.c b/driver/linux/modules/main.c
index 101071c..e7b1757 100644
--- a/driver/linux/modules/main.c
+++ b/driver/linux/modules/main.c
@@ -8,6 +8,7 @@
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/errno.h>
+#include <linux/platform_device.h>
 
 
 #if defined(OWL_PB42) || defined(PYTHON_EMU)
@@ -50,6 +51,85 @@ extern A_UINT_PTR get_pci_reg_addr();
 extern void dk_dev_exit(void);
 extern INT32 get_chip_id(INT32 cli_id,INT32 offset,INT32 size,INT32 *ret_val);
 int init_wmac_device(void);
+
+
+#ifdef USE_PLATFORM_FRAMEWORK
+#include <wlan/ah_devid.h>
+static struct platform_device *spdev;
+
+int
+get_wmac_irq(u_int16_t wmac_num)
+{
+	int ret;
+	struct resource *res;
+
+	res = platform_get_resource(spdev, IORESOURCE_IRQ, 0);
+	if (res == NULL) {
+		printk("no IRQ resource found\n");
+		ret = -ENXIO;
+		goto out;
+	}
+
+	ret = res->start;
+out:
+	return ret;
+}
+
+static const struct platform_device_id ath9k_platform_id_table[] = {
+	{
+		.name = "ath9k",
+		.driver_data = AR5416_AR9100_DEVID,
+	},
+	{
+		.name = "ar933x_wmac",
+		.driver_data = AR9300_DEVID_AR9330,
+	},
+	{
+		.name = "ar934x_wmac",
+		.driver_data = AR9300_DEVID_AR9340,
+	},
+	{
+		.name = "qca955x_wmac",
+		.driver_data = AR9300_DEVID_AR955X,
+	},
+	{},
+};
+
+static int ath_ahb_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	spdev = pdev;
+
+	if (!pdev->dev.platform_data) {
+		printk("no platform data specified\n");
+		ret = -EINVAL;
+		goto out;
+	}
+
+out:
+	return ret;
+}
+
+static int ath_ahb_remove(struct platform_device *pdev)
+{
+	spdev = NULL;
+	return 0;
+}
+
+static struct platform_driver ath_ahb_driver = {
+	.probe      = ath_ahb_probe,
+	.remove     = ath_ahb_remove,
+	.driver		= {
+		.name	= "ath9k",
+		.owner	= THIS_MODULE,
+	},
+	.id_table    = ath9k_platform_id_table,
+};
+
+MODULE_DEVICE_TABLE(platform, ath9k_platform_id_table);
+#endif
+
 static INT32 __init dk_module_init(void)
 {
 		INT32 error;
@@ -109,7 +189,7 @@ static INT32 __init dk_module_init(void)
 		if(ret_val==7){
 			printk("Writing value 0x6 to PCI_1 command register\n");
 			addr = (UINT32 *)(MERLIN_PCI_COMMAND_REG_ADDRESS);
-			writel(0x6,addr); // enabling ddr and dma of Merlin
+			//writel(0x6,addr); // enabling ddr and dma of Merlin
 		}else{
 			printk("No link on PCIe_1\n");
 		}
@@ -160,6 +240,9 @@ static INT32 __init dk_module_init(void)
 		init_client();
 #if  !defined(P1020)
 #ifdef AP83
+#if USE_PLATFORM_FRAMEWORK
+		platform_driver_register(&ath_ahb_driver);
+#endif
                 if (init_wmac_device()){ // enabling the wmac ; setting the handle for applications
                          printk("Error in initializing wmac \n");
                          return error;
@@ -234,6 +317,11 @@ for (iIndex=0; iIndex<1; iIndex++) { // assume that only one wmac
     }
     numBars = iIndex;
     irq=2;
+
+#ifdef USE_PLATFORM_FRAMEWORK
+    irq = get_wmac_irq(sIndex);
+#endif
+
 if (add_client(dev,(A_UINT_PTR *)baseaddr,len,irq, numBars, sIndex,0) < 0) {
 		printk(KERN_ERR "DK:: unable to add client \n");
 #if LINUX_VERSION_CODE > 132098
-- 
1.7.8.3

